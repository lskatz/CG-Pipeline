#!/usr/bin/env perl

# run_create_project: creates a project directory for CG-Pipeline
# Author: Lee Katz (lskatz@gatech.edu)

package PipelineRunner;
my ($VERSION) = ('$Id: $' =~ /,v\s+(\d+\S+)/o);

my $settings = {
  appname => 'cgpipeline',
};
my $stats;

use strict;
use FindBin;
use lib "$FindBin::RealBin/../lib";
$ENV{PATH} = "$FindBin::RealBin:".$ENV{PATH};
use AKUtils qw(logmsg);

use Getopt::Long;
use File::Basename;
use CGPipelineUtils;
use Data::Dumper;

$0 = fileparse($0);
local $SIG{'__DIE__'} = sub { my $e = $_[0]; $e =~ s/(at [^\s]+? line \d+\.$)/\nStopped $1/; die("$0: ".(caller(1))[3].": ".$e); };
sub logmsg {my $FH = $FSFind::LOG || *STDOUT; print $FH "$0: ".(caller(1))[3].": @_\n";}

exit(main());
sub main(){
  $settings = AKUtils::loadConfig($settings);
  
  # get options
  my @cmd_options = ('project=s');
  GetOptions($settings,@cmd_options) or die;
  
  my $project=$$settings{project}||die("Usage: ".usage());
  logmsg "Creating directory structure.";
  makeProjectDirectory($settings);

  return 0;
}

sub makeProjectDirectory($){
  my($settings)=@_;
  my $p=$$settings{project};
  mkpath(["$p","$p/annotation","$p/log","$p/build","$p/build/assembly","$p/build/prediction","$p/build/annotation"]);
}
# custom mkpath, since it doesn't work as expected everywhere
# It doesn't check to make sure that parent directories exist first, so make sure you give them in the right order!
sub mkpath{
  my($paths)=@_;
  foreach my $p (@$paths){
    next if(-d $p);
    mkdir $p or die("Could not create directory $p because $!.\n");
  }
}
sub usage{
  my $usage="$0 -p project
  where project is the name for your project.";
  return $usage;
}

